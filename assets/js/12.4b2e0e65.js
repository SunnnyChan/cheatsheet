(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{270:function(t,a,s){"use strict";s.r(a);var e=s(29),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),s("h2",{attrs:{id:"工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[t._v("#")]),t._v(" 工具")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.gitignore.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitignore.io - Create useful .gitignore files for your project"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"场景化命令行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景化命令行"}},[t._v("#")]),t._v(" 场景化命令行")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看README.md的修改历史")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -p README.mdgit log -S’PATTERN’ \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 搜索修改符合 stupid 的历史")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -S"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stupid'")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -p \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除database.yml被保存的记录，但是不影响本地文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cached database.yml \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回全部master分支的历史记录，包括未被合并到当前分支的提交记录。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("master \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回已合并分支列表或未合并的分支列表。这个命令对合并前检查非常有用。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch –merged "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch –no-merged \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 远程仓库更换名称，本地如何修改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url origin newAddress "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 适用于本地和远程的代码没得任何问题，就是远程仓库改了个名称  ")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" Merge")]),t._v(" "),s("ul",[s("li",[t._v("no-ff"),s("br"),t._v("\n在合并的同时会生成一个新的commit，这样，从分支历史上就可以看出分支信息。")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"merge with no-ff"')]),t._v(" dev\n")])])]),s("h2",{attrs:{id:"commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" Commit")]),t._v(" "),s("h3",{attrs:{id:"commit-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-message"}},[t._v("#")]),t._v(" Commit Message")]),t._v(" "),s("h4",{attrs:{id:"angular-规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#angular-规范"}},[t._v("#")]),t._v(" Angular 规范")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("("),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("): "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("subject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" // Header\n// 空一行\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n// 空一行\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("footer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("Header 是必需的，Body 和 Footer 可以省略。"),s("br"),t._v("\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。避免自动换行影响美观。")]),t._v(" "),s("p",[t._v("type用于说明 commit 的类别，只允许使用下面7个标识:"),s("br"),t._v("\nfeat：新功能（feature）"),s("br"),t._v("\nfix：修补bug"),s("br"),t._v("\ndocs：文档（documentation）"),s("br"),t._v("\nstyle： 格式（不影响代码运行的变动）"),s("br"),t._v("\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）"),s("br"),t._v("\ntest：增加测试"),s("br"),t._v("\nchore：构建过程或辅助工具的变动")]),t._v(" "),s("p",[t._v("如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。"),s("br"),t._v("\n其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。")]),t._v(" "),s("p",[t._v("scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。")]),t._v(" "),s("p",[t._v("subject是 commit 目的的简短描述，不超过50个字符"),s("br"),t._v("\n以动词开头，使用第一人称现在时，比如change，而不是changed或changes"),s("br"),t._v("\n第一个字母小写"),s("br"),t._v("\n结尾不加句号（.）")]),t._v(" "),s("p",[t._v("Body 部分是对本次 commit 的详细描述，可以分成多行。"),s("br"),t._v("\n两个注意点:")]),t._v(" "),s("ol",[s("li",[t._v("使用第一人称现在时，比如使用change而不是changed或changes。")]),t._v(" "),s("li",[t._v("应该说明代码变动的动机，以及与以前行为的对比。")])]),t._v(" "),s("p",[t._v("Footer 部分只用于两种情况：")]),t._v(" "),s("ol",[s("li",[t._v("不兼容变动"),s("br"),t._v("\n如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。")]),t._v(" "),s("li",[t._v("关闭 Issue"),s("br"),t._v("\n如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。"),s("br"),t._v("\n可以一次关闭多个 issue 。")])]),t._v(" "),s("p",[t._v("Revert:\n有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。"),s("br"),t._v("\n如：\nrevert: feat(pencil): add 'graphiteWidth' option"),s("br"),t._v("\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.")]),t._v(" "),s("p",[t._v("Body部分的格式是固定的，必须写成This reverts commit "),s("hash",[t._v(".，其中的hash是被撤销 commit 的 SHA 标识符。"),s("br"),t._v("\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。"),s("br"),t._v("\n如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。")])],1),t._v(" "),s("h4",{attrs:{id:"commitizen"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitizen"}},[t._v("#")]),t._v(" Commitizen")]),t._v(" "),s("p",[t._v("Commitizen是一个撰写合格 Commit message 的工具。\nnpm install -g commitizen")]),t._v(" "),s("p",[t._v("安装changelog，是生成changelog的工具"),s("br"),t._v("\nnpm install -g conventional-changelog"),s("br"),t._v("\nnpm install -g conventional-changelog-cli")]),t._v(" "),s("p",[t._v("检验上面两个工具是否安装成功"),s("br"),t._v("\nnpm ls -g -depth=0")]),t._v(" "),s("p",[t._v("使其支持Angular的Commit message格式"),s("br"),t._v("\ncommitizen init cz-conventional-changelog --save --save-exact")]),t._v(" "),s("h4",{attrs:{id:"validate-commit-msg"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validate-commit-msg"}},[t._v("#")]),t._v(" validate-commit-msg")]),t._v(" "),s("p",[t._v("用于检查 Node 项目的 Commit message 是否符合格式。")]),t._v(" "),s("h4",{attrs:{id:"conventional-changelog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conventional-changelog"}},[t._v("#")]),t._v(" conventional-changelog")]),t._v(" "),s("p",[t._v("生成 Change log 的工具")]),t._v(" "),s("h2",{attrs:{id:"config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[t._v("#")]),t._v(" Config")]),t._v(" "),s("p",[t._v("config 配置有system级别 global（用户级别） 和local（当前仓库）"),s("br"),t._v("\n设置先从system-》global-》local  底层配置会覆盖顶层配置"),s("br"),t._v("\n分别使用--system/global/local 可以定位到配置文件")]),t._v(" "),s("ul",[s("li",[t._v("查看")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --system --list\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global  --list\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --local  --list\n")])])]),s("ul",[s("li",[t._v("用户信息")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email XXX\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name XXX\n")])])]),s("ul",[s("li",[t._v("git 默认对于文件名大小写是不敏感的")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config core.ignorecase "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),s("h2",{attrs:{id:"错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误"}},[t._v("#")]),t._v(" 错误")]),t._v(" "),s("p",[t._v("error: you need to resolve your current index first")]),t._v(" "),s("p",[t._v("退回merge，git reset --merge")])])}),[],!1,null,null,null);a.default=n.exports}}]);