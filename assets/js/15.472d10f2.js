(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{259:function(a,t,s){"use strict";s.r(t);var e=s(29),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"maven"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven"}},[a._v("#")]),a._v(" Maven")]),a._v(" "),s("h2",{attrs:{id:"依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[a._v("#")]),a._v(" 依赖")]),a._v(" "),s("h3",{attrs:{id:"dependencymanagement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dependencymanagement"}},[a._v("#")]),a._v(" dependencyManagement")]),a._v(" "),s("p",[a._v("在dependencyManagement元素中声明所依赖的jar包的版本号等信息，"),s("br"),a._v("\n那么所有子项目再次引入此依赖jar包时则无需显式的列出版本号。")]),a._v(" "),s("p",[a._v("Maven 会沿着父子层级向上寻找拥有 dependencyManagement 元素的项目，然后使用它指定的版本号。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("优点"),s("br"),a._v("\n当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要逐个修改子项目；"),s("br"),a._v("\n另外如果某个子项目需要另外的一个版本，只需要声明version即可。")])]),a._v(" "),s("li",[s("p",[a._v("注意事项")])])]),a._v(" "),s("p",[a._v("dependencyManagement中定义的只是依赖的声明，并不实现引入，因此子项目需要显式的声明需要用的依赖。")]),a._v(" "),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),s("p",[a._v("可以定义项目的父类项目，用于继承父项目的依赖、插件、属性等信息。\n继承是包依赖管理的最简单手段。")]),a._v(" "),s("h3",{attrs:{id:"聚合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聚合"}},[a._v("#")]),a._v(" 聚合")]),a._v(" "),s("p",[a._v("聚合就是module形式。")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("modules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("module")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("demo-spring"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("module")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- Spring 框架 --\x3e")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("modules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("在父项目上面打包、编译等操作都会直接操作子模块，而不需要我们在其他项目上一个个打包等操作。")])])}),[],!1,null,null,null);t.default=n.exports}}]);