(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{283:function(t,s,n){"use strict";n.r(s);var a=n(29),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"alacritty-yml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alacritty-yml"}},[t._v("#")]),t._v(" alacritty.yml")]),t._v(" "),n("p",[t._v("~/.config/alacritty/alacritty.yml")]),t._v(" "),n("div",{staticClass:"language-yml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Configuration for Alacritty, the GPU enhanced terminal emulator.")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Any items in the `env` entry below will be added as")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# environment variables. Some entries may override variables")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set by alacritty itself.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TERM variable")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This value is used to set the `$TERM` environment variable for")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# each instance of Alacritty. If it is not present, alacritty will")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check the local terminfo database and use `alacritty` if it is")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# available, otherwise `xterm-256color` is used.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("TERM")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" xterm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("256color\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("window")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Window dimensions (changes require restart)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Specified in number of columns/lines, not pixels.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If both are `0`, this setting is ignored.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#dimensions:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  columns: 0")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  lines: 0")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Window position (changes require restart)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Specified in number of pixels.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If the position is not set, the window manager will handle the placement.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#position:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  x: 0")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  y: 0")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Window padding (changes require restart)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Blank space added around the window in pixels. This padding is scaled")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# by DPI and the specified value is always added at both opposing sides.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("padding")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Spread additional padding evenly around the terminal content.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#dynamic_padding: false")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Window decorations")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Values for `decorations`:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     - full: Borders and title bar")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     - none: Neither borders nor title bar")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Values for `decorations` (macOS only):")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     - transparent: Title bar, transparent background and title bar buttons")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     - buttonless: Title bar, transparent background, but no title bar buttons")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#decorations: full")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Startup Mode (changes require restart)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Values for `startup_mode`:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Windowed")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Maximized")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Fullscreen")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Values for `startup_mode` (macOS only):")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - SimpleFullscreen")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#startup_mode: Windowed")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Window title")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("title")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Alacritty\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Window class (Linux/BSD only):")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Application instance name")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("instance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Alacritty\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# General application class")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("general")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Alacritty\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GTK theme variant (Linux/BSD only)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set this to `None` to use the default theme variant.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#gtk_theme_variant: None")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scrolling")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Maximum number of lines in the scrollback buffer.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Specifying '0' will disable scrolling.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("history")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of lines the viewport will move for every line scrolled when")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# scrollback is enabled (history > 0).")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#multiplier: 3")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Scroll to the bottom when new text is written to the terminal.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#auto_scroll: false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Spaces per Tab (changes require restart)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This setting defines the width of a tab in cells.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Some applications, like Emacs, rely on knowing about the width of a tab.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# To prevent unexpected behavior in these applications, it's also required to")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# change the `it` value in terminfo when altering this setting.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#tabspaces: 8")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Font configuration")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("font")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Normal (roman) font face")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("normal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Font family")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (macOS) Menlo")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (Linux/BSD) monospace")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (Windows) Consolas")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: SauceCodePro Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: CodeNewRoman Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: RobotoMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Hack")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: JetBrains Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: UbuntuMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Monofur Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: TerminessTTF Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("family")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mononoki Nerd Font\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The `style` can be specified to pick a specific face.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("style")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Regular\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Bold font face")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bold")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Font family")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If the bold family is not specified, it will fall back to the")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# value specified for the normal font.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: SauceCodePro Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: CodeNewRoman Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: RobotoMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Hack")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: JetBrains Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: UbuntuMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Monofur Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: TerminessTTF Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("family")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mononoki Nerd Font\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The `style` can be specified to pick a specific face.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("style")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Bold\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Italic font face")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("italic")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Font family")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If the italic family is not specified, it will fall back to the")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# value specified for the normal font.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: SauceCodePro Nerd Font Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: CodeNewRoman Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: RobotoMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Hack")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: JetBrains Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: UbuntuMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Monofuritalic Nerd Font Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: TerminessTTF Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("family")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mononoki Nerd Font\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The `style` can be specified to pick a specific face.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("style")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Italic\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Bold italic font face")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bold_italic")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Font family")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If the bold italic family is not specified, it will fall back to the")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# value specified for the normal font.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: SauceCodePro Nerd Font Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: CodeNewRoman Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: RobotoMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Hack")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: JetBrains Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: UbuntuMono Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: Monofuritalic Nerd Font Mono")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# family: TerminessTTF Nerd Font")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("family")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mononoki Nerd Font\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The `style` can be specified to pick a specific face.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("style")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Bold Italic\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Point size")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("14.0")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Offset is the extra space around each character. `offset.y` can be thought of")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# as modifying the line spacing, and `offset.x` as modifying the letter spacing.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("offset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Glyph offset determines the locations of the glyphs within their cells with")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the default being at the bottom. Increasing `x` moves the glyph to the right,")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# increasing `y` moves the glyph upwards.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#glyph_offset:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  x: 0")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  y: 0")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Thin stroke font rendering (macOS only)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Thin strokes are suitable for retina displays, but for non-retina screens")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# it is recommended to set `use_thin_strokes` to `false`")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# macOS >= 10.14.x:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If the font quality on non-retina display looks bad then set")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# `use_thin_strokes` to `true` and enable font smoothing by running the")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# following command:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is a global setting and will require a log out or restart to take")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# effect.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#use_thin_strokes: true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If `true`, bold text is drawn using the bright color variants.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#draw_bold_text_with_bright_colors: true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Colors (Tomorrow Night Bright)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("colors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default colors")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("primary")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("background")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x002b36'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("foreground")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x93a1a1'")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Colors the cursor will use if `custom_cursor_colors` is true")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cursor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("text")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x002b36'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cursor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x93a1a1'")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Normal colors")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("normal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("black")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x002b36'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("red")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xdc322f'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("green")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x859900'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("yellow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xb58900'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("blue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x268bd2'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("magenta")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x6c71c4'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cyan")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x2aa198'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("white")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x93a1a1'")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Bright colors")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bright")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("black")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x657b83'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("red")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xdc322f'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("green")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x859900'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("yellow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xb58900'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("blue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x268bd2'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("magenta")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x6c71c4'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cyan")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x2aa198'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("white")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xfdf6e3'")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("indexed_colors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xcb4b16'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xd33682'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x073642'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x586e75'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x839496'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xeee8d5'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Visual Bell")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Any time the BEL code is received, Alacritty "rings" the visual bell. Once')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rung, the terminal background will be set to white and transition back to the")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default background color. You can control the rate of this transition by")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# setting the `duration` property (represented in milliseconds). You can also")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# configure the transition function by setting the `animation` property.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Values for `animation`:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Ease")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOut")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOutSine")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOutQuad")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOutCubic")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOutQuart")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOutQuint")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOutExpo")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - EaseOutCirc")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Linear")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Specifying a `duration` of `0` will disable the visual bell.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#visual_bell:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  animation: EaseOutExpo")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  duration: 0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  color: '0xffffff'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Background opacity")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Window opacity as a floating point number from `0.0` to `1.0`.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The value `0.0` is completely transparent and `1.0` is opaque.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("background_opacity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# background_opacity: 0.95")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#selection:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#semantic_escape_chars: ",│`|:\\"\' ()[]{}<>\\t"')]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# When set to `true`, selected text will be copied to the primary clipboard.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#save_to_clipboard: false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Allow terminal applications to change Alacritty's window title.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#dynamic_title: true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#cursor:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cursor style")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Values for `style`:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ▇ Block")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - _ Underline")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - | Beam")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#style: Block")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If this is `true`, the cursor will be rendered as a hollow box when the")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# window is not focused.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#unfocused_hollow: true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Live config reload (changes require restart)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#live_config_reload: true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Shell")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Entries in `shell.args` are passed unmodified as arguments to the shell.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (macOS) /bin/bash --login")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (Linux/BSD) user login shell")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (Windows) powershell")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#shell:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  program: /bin/bash")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  args:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - --login")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Startup directory")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Directory the shell is started in. If this is unset, or `None`, the working")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# directory of the parent process will be used.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#working_directory: None")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# WinPTY backend (Windows only)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Alacritty defaults to using the newer ConPTY backend if it is available,")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# since it resolves a lot of bugs and is quite a bit faster. If it is not")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# available, the the WinPTY backend will be used instead.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# even if the ConPTY backend is available.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#winpty_backend: false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Send ESC (\\x1b) before characters when alt is pressed.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#alt_send_esc: true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#debug:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Display the time it takes to redraw each frame.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#render_timer: false")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Keep the log file after quitting Alacritty.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#persistent_logging: false")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Log level")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Values for `log_level`:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - None")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Error")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Warn")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Info")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Debug")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Trace")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#log_level: Warn")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Print all received window events.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#print_events: false")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Record all characters and escape sequences as test data.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ref_test: false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#mouse:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Click settings")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The `double_click` and `triple_click` settings control the time")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# alacritty should wait for accepting multiple clicks as one double")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or triple click.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#double_click: { threshold: 300 }")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#triple_click: { threshold: 300 }")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If this is `true`, the cursor is temporarily hidden when typing.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#hide_when_typing: false")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#url:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# URL launcher")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This program is executed when clicking on a text which is recognized as a URL.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The URL is always added to the command as the last parameter.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# When set to `None`, URL launching will be disabled completely.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (macOS) open")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (Linux/BSD) xdg-open")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - (Windows) explorer")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#launcher:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  program: xdg-open")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  args: []")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# URL modifiers")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# These are the modifiers that need to be held down for opening URLs when clicking")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on them. The available modifiers are documented in the key binding section.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#modifiers: None")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Mouse bindings")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Mouse bindings are specified as a list of objects, much like the key")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bindings further below.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Each mouse binding will specify a:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `mouse`:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Middle")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Left")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Right")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Numeric identifier such as `5`")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `action` (see key bindings)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# And optionally:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `mods` (see key bindings)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#mouse_bindings:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  - { mouse: Middle, action: PasteSelection }")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Key bindings")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Key bindings are specified as a list of objects. For example, this is the")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default paste binding:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# `- { key: V, mods: Control|Shift, action: Paste }`")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Each key binding will specify a:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `key`: Identifier of the key pressed")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - A-Z")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - F1-F24")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Key0-Key9")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    A full list with available key codes can be found here:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    Instead of using the name of the keys, the `key` field also supports using")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    the scancode of the desired key. Scancodes have to be specified as a")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    decimal number. This command will allow you to display the hex scancodes")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    for certain keys:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       `showkey --scancodes`.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Then exactly one of:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `chars`: Send a byte sequence to the running application")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    The `chars` field writes the specified string to the terminal. This makes")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    it possible to pass escape sequences. To find escape codes for bindings")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#    like `PageUp` (`"\\x1b[5~"`), you can run the command `showkey -a` outside')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    of tmux. Note that applications use terminfo to map escape sequences back")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    to keys. It is therefore required to update the terminfo when changing an")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    escape sequence.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `action`: Execute a predefined action")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Copy")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Paste")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - PasteSelection")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - IncreaseFontSize")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - DecreaseFontSize")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ResetFontSize")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ScrollPageUp")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ScrollPageDown")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ScrollLineUp")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ScrollLineDown")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ScrollToTop")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ScrollToBottom")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ClearHistory")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Hide")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Minimize")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - Quit")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ToggleFullscreen")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - SpawnNewInstance")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ClearLogNotice")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ReceiveChar")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - None")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   (macOS only):")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `command`: Fork and execute a specified command plus arguments")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    The `command` field must be a map containing a `program` string and an")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    `args` array of command line parameter strings. For example:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       `{ program: "alacritty", args: ["-e", "vttest"] }`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# And optionally:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `mods`: Key modifiers to filter binding actions")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Command")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Control")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Option")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Super")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Shift")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Alt")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    Multiple `mods` can be combined using `|` like this:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       `mods: Control|Shift`.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    Whitespace and capitalization are relevant and must match the example.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - `mode`: Indicate a binding for only specific terminal reported modes")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    This is mainly used to send applications the correct escape sequences")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    when in different modes.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - AppCursor")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - AppKeypad")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    - Alt")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    A `~` operator can be used before a mode to apply the binding whenever")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    the mode is *not* active, e.g. `~Alt`.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Bindings are always filled by default, but will be replaced when a new")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# binding with the same triggers is defined. To unset a default binding, it can")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a no-op if you do not wish to receive input characters for that binding.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key_bindings")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (Windows, Linux, and BSD only)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" V"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("Shift"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Paste            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" C"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("Shift"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Copy             "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Insert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Shift"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PasteSelection   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Key0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ResetFontSize    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Equals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IncreaseFontSize "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IncreaseFontSize "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Subtract"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" DecreaseFontSize "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Minus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" DecreaseFontSize "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Paste"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Paste                            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Copy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                     "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Copy                             "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ClearLogNotice                   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Control"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("chars")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x0c"')]),t._v("                            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PageUp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Shift"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ScrollPageUp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ~Alt       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PageDown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Shift"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ScrollPageDown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ~Alt       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Home"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Shift"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ScrollToTop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ~Alt       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" End"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Shift"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ScrollToBottom"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ~Alt       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);